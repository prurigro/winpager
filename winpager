#!/usr/bin/env bash

#
# winpager: a dynamic window paging system for xorg
#
#   by Kevin MacMartin <prurigro@gmail.com>
#   released under the MIT license
#
#   requirements:
#     wmctrl   : http://tomas.styblo.name/wmctrl
#     xprop    : http://xorg.freedesktop.org
#     xwininfo : http://xorg.freedesktop.org
#

# Script locations
script_name="${0//*\/}"
tmpdir="/tmp/$script_name"

# Dependencies
dependencies=('wmctrl' 'xprop' 'xwininfo')

# Colour scheme
[[ -t 1 ]] && {
    c_d=$'\e[1;30m' # DARK GREY
    c_r=$'\e[1;31m' # RED
    c_g=$'\e[1;32m' # GREEN
    c_y=$'\e[1;33m' # YELLOW
    c_b=$'\e[1;34m' # BLUE
    c_m=$'\e[1;35m' # MAGENTA
    c_w=$'\e[1;37m' # WHITE
    c_c=$'\e[0m'    # DISABLES COLOUR
}

# Display an error and exit
function error_exit() {
    printf '%s %s\n' "${c_b}ERROR$c_c:" "$c_w$1$c_c" >&2
    exit 1
}

# Display help information
function show_help() {
    printf '\n%s\n\n' "${c_y}WinPager$c_c - ${c_w}A dynamic window paging system$c_c"
    printf '%s\n\n' "${c_b}USAGE$c_c: $c_y$script_name $c_d[${c_r}COMMAND$c_d] [${c_r}ARGS$c_d]$c_c"
    printf '%s\n' "${c_b}COMMANDS$c_c:"
    printf '  %-79s%s\n' "$c_w--set    $c_d|$c_w set $c_d[${c_r}NUM$c_d]$c_c" "assign a window to a pager $c_d[${c_r}NUM$c_d]$c_c"
    printf '  %-79s%s\n' "$c_w--get    $c_d|$c_w get $c_d[${c_r}NUM$c_d]$c_c" "go to its desktop and focus $c_d[${c_r}NUM$c_d]$c_c"
    printf '  %-58s%s\n' "$c_w--toggle $c_d|$c_w toggle$c_c" 'toggle focus between windows 1 & 2'
    printf '  %-104s%s\n' "$c_w--toggle $c_d|$c_w toggle $c_d[${c_r}NUM1$c_d]$c_c $c_d[${c_r}NUM2$c_d]$c_c" "toggle between windows $c_d[${c_r}NUM1$c_d]$c_c & $c_d[${c_r}NUM2$c_d]$c_c"
    printf '  %-79s%s\n' "$c_w--unset  $c_d|$c_w unset $c_d[${c_r}NUM$c_d]$c_c" "unassign the window from pager $c_d[${c_r}NUM$c_d]$c_c"
    printf '  %-58s%s\n' "$c_w--clear  $c_d|$c_w clear$c_c" 'remove all assigned windows from the pager'
    printf '  %-58s%s\n\n' "$c_w--help   $c_d|$c_w help$c_c" 'show this help text'
}

# Assign a window to a number
function setwin() {
    local wininfo
    while read -r; do
        [[ "$REPLY" =~ xwininfo:\ Window\ id: ]] && {
            wininfo="$REPLY"
            break
        }
    done < <(xwininfo)
    [[ -n "$wininfo" ]] \
        || return 1
    wininfo="${wininfo/xwininfo: Window id: }"
    wininfo="${wininfo/ *}"
    printf '%s\n' "$wininfo" > "${1:?}"
}

# Unset a given number's window
function unsetwin() {
    [[ -f "$1" ]] \
        && rm "${1:?}"
}

# Select a given number's window
function getwin() {
    # ensure the requested pager ref exists and still has its window
    error_text="no window has been defined for $c_m${1/*\/}"
    [[ -f "$1" ]] || {
        error_exit "$error_text"
        exit 1
    }
    [[ -s "$1" ]] || {
        error_exit "$error_text"
        rm "${1:?}"
        exit 1
    }
    local win="$(<"$1")"
    local wminfo="$(wmctrl -l)"
    wminfo="${wminfo//0x}"
    [[ "$wminfo" =~ ${win//0x} ]] || {
        # The window !exists so delete pager ref and exit
        rm "${1:?}"
        exit 1
    }
    wmctrl -i -a "$(<"$1")"
}

# Toggle windows
function togglewins() {
    # Set the first pager ref number to toggle
    if [[ -n "$1" ]]; then
        if [[ "$1" =~ ^[0-9][0-9]*$ ]]; then
            num1="$1"
        else
            exit 1
        fi
    else
        num1=1
    fi

    # Set the second pager ref number to toggle
    if [[ -n "$2" ]]; then
        if [[ "$2" =~ ^[0-9][0-9]*$ ]]; then
            num2="$2"
        else
            exit 1
        fi
    else
        num2=2
    fi

    # Remove the toggle file and exit if either no longer exist
    if [[ ! -f "$tmpdir/$num1" ]] || [[ ! -f "$tmpdir/$num2" ]]; then
        [[ -f "$tmpdir/toggle" ]] \
            && rm "${tmpdir:?}/toggle"
        exit 1
    fi

    # If both pager ref nums exist, create the toggle file if !exist
    [[ ! -f "$tmpdir/toggle" ]] \
        && printf '%s\n' "$num1" > "${tmpdir:?}/toggle"

    # Set the pager ref num based on the current state
    currwin="$(xprop -root _NET_ACTIVE_WINDOW)"
    currwin="${currwin/* }"
    [[ -n "$currwin" ]] \
        || exit 1
    if [[ $(<"$tmpdir/$num1") = "$currwin" ]]; then
        dotoggle="$num2"
    elif [[ $(<"$tmpdir/$num2") = "$currwin" ]]; then
        dotoggle="$num1"
    elif [[ $(<"$tmpdir/toggle") = "$num1" ]]; then
        dotoggle="$num2"
    else
        dotoggle="$num1"
    fi

    # Attempt to 'get' the window we set
    getwin "$tmpdir/$dotoggle"
    if [[ ! -s "$tmpdir/$dotoggle" ]]; then
        # Remove the toggle file if the pager ref num is gone
        [[ -f "$tmpdir/toggle" ]] \
            && rm "${tmpdir:?}/toggle"
        exit 1
    else
        # Record the updated pager ref num if it still exists
        printf '%s\n' "$dotoggle" > "${tmpdir:?}/toggle"
        exit
    fi
}

# Test for programs required by this script before running
declare -a missing_dependencies
for dep in "${dependencies[@]}"; do
    type -P "$dep" >/dev/null \
        || missing_dependencies=( ${missing_dependencies[@]} "$dep" )
done
[[ -n "${missing_dependencies[*]}" ]] && {
    error_exit "${c_w}missing dependencies ($c_c$(
        for dep in "${missing_dependencies[@]}"; do
            printf '%s%s' "$c_m$dep$c_c" ', '
        done | sed 's|, $||'
    )$c_w)$c_c"
}

# Create the temp directory if it doesn't exist
[[ ! -d "$tmpdir" ]] \
    && install -d "$tmpdir"

# Exit with error if no arguments are given, otherwise parse for commands
if [[ -n "$1" ]]; then
    case "$1" in
        -h|--help|help)
            # Show the help text
            show_help
            exit
            ;;
        --clear|clear)
            # Clear the assignments
            rm "${tmpdir:?}"/*
            exit
            ;;
        --toggle|toggle)
            togglewins "$2" "$3"
            ;;
    esac
fi

# Parse for the remaining commands
errortext="run with ${c_w}set$c_c, ${c_w}unset$c_c or ${c_w}get$c_c, followed by a number"
if [[ -n "$2" ]] && [[ "$2" =~ ^[0-9][0-9]*$ ]]; then
    case "$1" in
        --set|set)
            # The 'set' command
            setwin "$tmpdir/$2"
            ;;
        --unset|unset)
            # The 'unset' command
            unsetwin "$tmpdir/$2"
            ;;
        --get|get)
            # The 'get' command
            getwin "$tmpdir/$2"
            ;;
        *)
            # Fail for anything else
            error_exit "$errortext"
            ;;
    esac
else
    # Fail if a number wasn't passed as a second argument
    error_exit "$errortext"
fi

